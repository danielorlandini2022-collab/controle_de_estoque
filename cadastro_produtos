import sqlite3
import tkinter as tk
from tkinter import messagebox
import traceback

DB_PATH = "produtos.db"

def init_db():
    """Cria a tabela de produtos se não existir."""
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS produto (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            descricao TEXT,
            preco REAL NOT NULL,
            quantidade INTEGER NOT NULL,
            categoria TEXT
        )
        """)
        conn.commit()

def cadastrar():
    nome = entry_nome.get().strip()
    descricao = entry_descricao.get().strip()
    preco = entry_preco.get().strip()
    quantidade = entry_quantidade.get().strip()
    categoria = entry_categoria.get().strip()

    if not nome or not preco or not quantidade:
        messagebox.showwarning("Atenção", "Nome, Preço e Quantidade são obrigatórios!")
        return

    try:
        preco = float(preco)
        quantidade = int(quantidade)
    except ValueError:
        messagebox.showerror("Erro", "Preço deve ser número (ex: 10.50) e Quantidade deve ser inteiro.")
        return

    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO produto (nome, descricao, preco, quantidade, categoria) VALUES (?, ?, ?, ?, ?)",
                (nome, descricao, preco, quantidade, categoria)
            )
            conn.commit()
        messagebox.showinfo("Sucesso", "Produto cadastrado com sucesso!")
        limpar_campos()
    except Exception as e:
        traceback.print_exc()
        messagebox.showerror("Erro", f"Ocorreu um erro inesperado:\n{e}")

def limpar_campos():
    entry_nome.delete(0, tk.END)
    entry_descricao.delete(0, tk.END)
    entry_preco.delete(0, tk.END)
    entry_quantidade.delete(0, tk.END)
    entry_categoria.delete(0, tk.END)

# --- Interface ---
root = tk.Tk()
root.title("Cadastro de Produtos")
root.geometry("900x500")
root.minsize(700, 400)
font = ("Arial", 14)

frame = tk.Frame(root, padx=24, pady=20)
frame.pack(fill="both", expand=True)
frame.columnconfigure(1, weight=1)

# Labels e Entrys
tk.Label(frame, text="Nome:", font=font).grid(row=0, column=0, sticky="e", padx=(0,12), pady=10)
entry_nome = tk.Entry(frame, font=font)
entry_nome.grid(row=0, column=1, sticky="ew", pady=10)

tk.Label(frame, text="Descrição:", font=font).grid(row=1, column=0, sticky="e", padx=(0,12), pady=10)
entry_descricao = tk.Entry(frame, font=font)
entry_descricao.grid(row=1, column=1, sticky="ew", pady=10)

tk.Label(frame, text="Preço (R$):", font=font).grid(row=2, column=0, sticky="e", padx=(0,12), pady=10)
entry_preco = tk.Entry(frame, font=font)
entry_preco.grid(row=2, column=1, sticky="ew", pady=10)

tk.Label(frame, text="Quantidade:", font=font).grid(row=3, column=0, sticky="e", padx=(0,12), pady=10)
entry_quantidade = tk.Entry(frame, font=font)
entry_quantidade.grid(row=3, column=1, sticky="ew", pady=10)

tk.Label(frame, text="Categoria:", font=font).grid(row=4, column=0, sticky="e", padx=(0,12), pady=10)
entry_categoria = tk.Entry(frame, font=font)
entry_categoria.grid(row=4, column=1, sticky="ew", pady=10)

# Botões
btn_frame = tk.Frame(frame)
btn_frame.grid(row=5, column=0, columnspan=2, pady=20)

btn_cadastrar = tk.Button(btn_frame, text="Cadastrar", command=cadastrar,
                          font=font, width=16, bg="#4CAF50", fg="white")
btn_cadastrar.pack(side="left", padx=10)

btn_limpar = tk.Button(btn_frame, text="Limpar", command=limpar_campos,
                       font=font, width=16, bg="#2196F3", fg="white")
btn_limpar.pack(side="left", padx=10)

def on_closing():
    root.destroy()

root.protocol("WM_DELETE_WINDOW", on_closing)

if __name__ == "__main__":
    init_db()
    root.mainloop()
