import sqlite3
import tkinter as tk
from tkinter import messagebox
import traceback

DB_PATH = "empresas.db"

def init_db():
    """Cria a tabela de empresas se não existir."""
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS empresa (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            cnpj TEXT UNIQUE NOT NULL,
            endereco TEXT,
            telefone TEXT,
            email TEXT
        )
        """)
        conn.commit()

def cadastrar():
    nome = entry_nome.get().strip()
    cnpj = entry_cnpj.get().strip()
    endereco = entry_endereco.get().strip()
    telefone = entry_telefone.get().strip()
    email = entry_email.get().strip()

    if not nome or not cnpj:
        messagebox.showwarning("Atenção", "Nome e CNPJ são obrigatórios!")
        return

    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO empresa (nome, cnpj, endereco, telefone, email) VALUES (?, ?, ?, ?, ?)",
                (nome, cnpj, endereco, telefone, email)
            )
            conn.commit()
        messagebox.showinfo("Sucesso", "Empresa cadastrada com sucesso!")
        limpar_campos()
    except sqlite3.IntegrityError:
        messagebox.showerror("Erro", "CNPJ já cadastrado.")
    except Exception as e:
        traceback.print_exc()
        messagebox.showerror("Erro", f"Ocorreu um erro inesperado:\n{e}")

def limpar_campos():
    entry_nome.delete(0, tk.END)
    entry_cnpj.delete(0, tk.END)
    entry_endereco.delete(0, tk.END)
    entry_telefone.delete(0, tk.END)
    entry_email.delete(0, tk.END)

# --- Interface ---
root = tk.Tk()
root.title("Cadastro de Empresas")
root.geometry("900x500")
root.minsize(700, 400)
font = ("Arial", 14)

frame = tk.Frame(root, padx=24, pady=20)
frame.pack(fill="both", expand=True)
frame.columnconfigure(1, weight=1)

# Labels e Entrys
tk.Label(frame, text="Nome:", font=font).grid(row=0, column=0, sticky="e", padx=(0,12), pady=10)
entry_nome = tk.Entry(frame, font=font)
entry_nome.grid(row=0, column=1, sticky="ew", pady=10)

tk.Label(frame, text="CNPJ:", font=font).grid(row=1, column=0, sticky="e", padx=(0,12), pady=10)
entry_cnpj = tk.Entry(frame, font=font)
entry_cnpj.grid(row=1, column=1, sticky="ew", pady=10)

tk.Label(frame, text="Endereço:", font=font).grid(row=2, column=0, sticky="e", padx=(0,12), pady=10)
entry_endereco = tk.Entry(frame, font=font)
entry_endereco.grid(row=2, column=1, sticky="ew", pady=10)

tk.Label(frame, text="Telefone:", font=font).grid(row=3, column=0, sticky="e", padx=(0,12), pady=10)
entry_telefone = tk.Entry(frame, font=font)
entry_telefone.grid(row=3, column=1, sticky="ew", pady=10)

tk.Label(frame, text="Email:", font=font).grid(row=4, column=0, sticky="e", padx=(0,12), pady=10)
entry_email = tk.Entry(frame, font=font)
entry_email.grid(row=4, column=1, sticky="ew", pady=10)

# Botões
btn_frame = tk.Frame(frame)
btn_frame.grid(row=5, column=0, columnspan=2, pady=20)

btn_cadastrar = tk.Button(btn_frame, text="Cadastrar", command=cadastrar,
                          font=font, width=16, bg="#4CAF50", fg="white")
btn_cadastrar.pack(side="left", padx=10)

btn_limpar = tk.Button(btn_frame, text="Limpar", command=limpar_campos,
                       font=font, width=16, bg="#2196F3", fg="white")
btn_limpar.pack(side="left", padx=10)

def on_closing():
    root.destroy()

root.protocol("WM_DELETE_WINDOW", on_closing)

if __name__ == "__main__":
    init_db()
    root.mainloop()
