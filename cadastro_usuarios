import sqlite3
import tkinter as tk
from tkinter import messagebox
import traceback
from PIL import Image, ImageTk   # pip install pillow
import os

DB_PATH = "sistema.db"

# ---------------- BANCO ----------------
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            senha TEXT NOT NULL
        )""")
        conn.execute("""
        CREATE TABLE IF NOT EXISTS produtos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            preco REAL NOT NULL,
            quantidade INTEGER NOT NULL
        )""")
        conn.execute("""
        CREATE TABLE IF NOT EXISTS empresa (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            cnpj TEXT UNIQUE NOT NULL,
            endereco TEXT,
            telefone TEXT,
            email TEXT
        )""")
        conn.commit()

# ---------------- TELAS DE CADASTRO ----------------
def tela_usuarios():
    janela = tk.Toplevel(root)
    janela.title("Cadastro de Usuários")
    janela.geometry("900x500")
    font = ("Arial", 14)

    frame = tk.Frame(janela, padx=24, pady=20)
    frame.pack(fill="both", expand=True)
    frame.columnconfigure(1, weight=1)

    tk.Label(frame, text="Nome:", font=font).grid(row=0, column=0, sticky="e", pady=10)
    entry_nome = tk.Entry(frame, font=font)
    entry_nome.grid(row=0, column=1, sticky="ew", pady=10)

    tk.Label(frame, text="Email:", font=font).grid(row=1, column=0, sticky="e", pady=10)
    entry_email = tk.Entry(frame, font=font)
    entry_email.grid(row=1, column=1, sticky="ew", pady=10)

    tk.Label(frame, text="Senha:", font=font).grid(row=2, column=0, sticky="e", pady=10)
    entry_senha = tk.Entry(frame, font=font, show="*")
    entry_senha.grid(row=2, column=1, sticky="ew", pady=10)

    def cadastrar():
        nome, email, senha = entry_nome.get(), entry_email.get(), entry_senha.get()
        if not nome or not email or not senha:
            messagebox.showwarning("Atenção", "Preencha todos os campos!")
            return
        try:
            with sqlite3.connect(DB_PATH) as conn:
                conn.execute("INSERT INTO usuarios (nome,email,senha) VALUES (?,?,?)",
                             (nome, email, senha))
                conn.commit()
            messagebox.showinfo("Sucesso", "Usuário cadastrado com sucesso!")
        except sqlite3.IntegrityError:
            messagebox.showerror("Erro", "Email já cadastrado.")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("Erro", str(e))

    tk.Button(frame, text="Cadastrar", command=cadastrar,
              font=font, bg="#4CAF50", fg="white", width=16).grid(row=3, column=0, columnspan=2, pady=20)

def tela_produtos():
    janela = tk.Toplevel(root)
    janela.title("Cadastro de Produtos")
    janela.geometry("900x500")
    font = ("Arial", 14)

    frame = tk.Frame(janela, padx=24, pady=20)
    frame.pack(fill="both", expand=True)
    frame.columnconfigure(1, weight=1)

    tk.Label(frame, text="Nome:", font=font).grid(row=0, column=0, sticky="e", pady=10)
    entry_nome = tk.Entry(frame, font=font)
    entry_nome.grid(row=0, column=1, sticky="ew", pady=10)

    tk.Label(frame, text="Preço:", font=font).grid(row=1, column=0, sticky="e", pady=10)
    entry_preco = tk.Entry(frame, font=font)
    entry_preco.grid(row=1, column=1, sticky="ew", pady=10)

    tk.Label(frame, text="Quantidade:", font=font).grid(row=2, column=0, sticky="e", pady=10)
    entry_quantidade = tk.Entry(frame, font=font)
    entry_quantidade.grid(row=2, column=1, sticky="ew", pady=10)

    def cadastrar():
        nome, preco, qtd = entry_nome.get(), entry_preco.get(), entry_quantidade.get()
        if not nome or not preco or not qtd:
            messagebox.showwarning("Atenção", "Preencha todos os campos!")
            return
        try:
            preco, qtd = float(preco), int(qtd)
            with sqlite3.connect(DB_PATH) as conn:
                conn.execute("INSERT INTO produtos (nome,preco,quantidade) VALUES (?,?,?)",
                             (nome, preco, qtd))
                conn.commit()
            messagebox.showinfo("Sucesso", "Produto cadastrado com sucesso!")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("Erro", str(e))

    tk.Button(frame, text="Cadastrar", command=cadastrar,
              font=font, bg="#4CAF50", fg="white", width=16).grid(row=3, column=0, columnspan=2, pady=20)

def tela_empresas():
    janela = tk.Toplevel(root)
    janela.title("Cadastro de Empresas")
    janela.geometry("900x500")
    font = ("Arial", 14)

    frame = tk.Frame(janela, padx=24, pady=20)
    frame.pack(fill="both", expand=True)
    frame.columnconfigure(1, weight=1)

    tk.Label(frame, text="Nome:", font=font).grid(row=0, column=0, sticky="e", pady=10)
    entry_nome = tk.Entry(frame, font=font)
    entry_nome.grid(row=0, column=1, sticky="ew", pady=10)

    tk.Label(frame, text="CNPJ:", font=font).grid(row=1, column=0, sticky="e", pady=10)
    entry_cnpj = tk.Entry(frame, font=font)
    entry_cnpj.grid(row=1, column=1, sticky="ew", pady=10)

    tk.Label(frame, text="Endereço:", font=font).grid(row=2, column=0, sticky="e", pady=10)
    entry_endereco = tk.Entry(frame, font=font)
    entry_endereco.grid(row=2, column=1, sticky="ew", pady=10)

    tk.Label(frame, text="Telefone:", font=font).grid(row=3, column=0, sticky="e", pady=10)
    entry_telefone = tk.Entry(frame, font=font)
    entry_telefone.grid(row=3, column=1, sticky="ew", pady=10)

    tk.Label(frame, text="Email:", font=font).grid(row=4, column=0, sticky="e", pady=10)
    entry_email = tk.Entry(frame, font=font)
    entry_email.grid(row=4, column=1, sticky="ew", pady=10)

    def cadastrar():
        nome, cnpj, end, tel, email = entry_nome.get(), entry_cnpj.get(), entry_endereco.get(), entry_telefone.get(), entry_email.get()
        if not nome or not cnpj:
            messagebox.showwarning("Atenção", "Nome e CNPJ são obrigatórios!")
            return
        try:
            with sqlite3.connect(DB_PATH) as conn:
                conn.execute("INSERT INTO empresa (nome,cnpj,endereco,telefone,email) VALUES (?,?,?,?,?)",
                             (nome, cnpj, end, tel, email))
                conn.commit()
            messagebox.showinfo("Sucesso", "Empresa cadastrada com sucesso!")
        except sqlite3.IntegrityError:
            messagebox.showerror("Erro", "CNPJ já cadastrado.")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("Erro", str(e))

    tk.Button(frame, text="Cadastrar", command=cadastrar,
              font=font, bg="#4CAF50", fg="white", width=16).grid(row=5, column=0, columnspan=2, pady=20)

# ---------------- MAIN ----------------
root = tk.Tk()
root.title("Sistema de Cadastro")
root.geometry("1000x600")

# Menus
menu_bar = tk.Menu(root)

menu_cadastro = tk.Menu(menu_bar, tearoff=0)
menu_cadastro.add_command(label="Usuários", command=tela_usuarios)
menu_cadastro.add_command(label="Produtos", command=tela_produtos)
menu_cadastro.add_command(label="Empresas", command=tela_empresas)

menu_bar.add_cascade(label="Cadastros", menu=menu_cadastro)
menu_bar.add_command(label="Sair", command=root.quit)

root.config(menu=menu_bar)

# Logo e título centralizados abaixo dos menus
CAMINHO_IMAGEM = os.path.join(os.path.dirname(__file__), "logo.png")

try:
    if os.path.exists(CAMINHO_IMAGEM):
        imagem = Image.open(CAMINHO_IMAGEM)
        imagem = imagem.resize((300, 300))
        logo = ImageTk.PhotoImage(imagem)

        frame_central = tk.Frame(root)
        frame_central.pack(expand=True)

        lbl_logo = tk.Label(frame_central, image=logo)
        lbl_logo.image = logo
        lbl_logo.pack(pady=20)

        lbl_titulo = tk.Label(frame_central, text="Sistema Controle de Estoque",
                              font=("Arial", 20, "bold"))
        lbl_titulo.pack(pady=10)
    else:
        print("⚠️ Arquivo de logo não encontrado:", CAMINHO_IMAGEM)
except Exception as e:
    print("Erro ao carregar logo:", e)

if __name__ == "__main__":
    init_db()
    root.mainloop()
